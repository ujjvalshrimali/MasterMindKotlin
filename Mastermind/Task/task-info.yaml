type: edu
files:
- name: partId
  visible: false
  learner_created: false
- name: assignmentKey
  visible: false
  learner_created: false
- name: src/ujjval/mastermind/evaluateGuess.kt
  visible: true
  placeholders:
  - offset: 162
    length: 156
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 158
    initialized_from_dependency: false
    selected: true
    status: Unchecked
  text: |
    package mastermind

    data class Evaluation(val rightPosition: Int, val wrongPosition: Int)

    fun evaluateGuess(secret: String, guess: String): Evaluation {
        TODO()
    }
  learner_created: false
- name: src/ujjval/mastermind/playMastermind.kt
  visible: true
  text: |
    package mastermind

    import kotlin.random.Random

    val ALPHABET = 'A'..'F'
    const val CODE_LENGTH = 4

    fun main() {
        val differentLetters = false
        playMastermind(differentLetters)
    }

    fun playMastermind(
            differentLetters: Boolean,
            secret: String = generateSecret(differentLetters)
    ) {
        var evaluation: Evaluation

        do {
            print("Your guess: ")
            var guess = readLine()!!
            while (hasErrorsInInput(guess)) {
                println("Incorrect input: $guess. " +
                        "It should consist of $CODE_LENGTH characters from $ALPHABET. " +
                        "Please try again.")
                guess = readLine()!!
            }
            evaluation = evaluateGuess(secret, guess)
            if (evaluation.isComplete()) {
                println("The guess is correct!")
            } else {
                println("Right positions: ${evaluation.rightPosition}; " +
                        "wrong positions: ${evaluation.wrongPosition}.")
            }

        } while (!evaluation.isComplete())
    }

    fun Evaluation.isComplete(): Boolean = rightPosition == CODE_LENGTH

    fun hasErrorsInInput(guess: String): Boolean {
        val possibleLetters = ALPHABET.toSet()
        return guess.length != CODE_LENGTH || guess.any { it !in possibleLetters }
    }

    fun generateSecret(differentLetters: Boolean): String {
        val chars = ALPHABET.toMutableList()
        return buildString {
            for (i in 1..CODE_LENGTH) {
                val letter = chars[Random.nextInt(chars.size)]
                append(letter)
                if (differentLetters) {
                    chars.remove(letter)
                }
            }
        }
    }
  learner_created: false
feedback_link: https://www.coursera.org/learn/kotlin-for-java-developers/programming/vmwVT/mastermind-game/discussions
status: Unchecked
record: -1
